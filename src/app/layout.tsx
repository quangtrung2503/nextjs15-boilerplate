import type { Metadata } from "next";
import localFont from "next/font/local";
import { Providers } from './providers';
import { NextIntlClientProvider } from 'next-intl';
import { getMessages, setRequestLocale } from 'next-intl/server';
import { routing } from "@/libs/i18nNavigation";

import "./globals.css";

const geistSans = localFont({
    src: "./../fonts/GeistVF.woff",
    variable: "--font-geist-sans",
    weight: "100 900",
});
const geistMono = localFont({
    src: "./../fonts/GeistMonoVF.woff",
    variable: "--font-geist-mono",
    weight: "100 900",
});

export const metadata: Metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
};

export function generateStaticParams() {
    return routing.locales.map(locale => ({ locale }));
}

export default async function RootLayout(props: Readonly<{
    children: React.ReactNode;
    params: Promise<{ locale: string }>;
}>) {
    const { children } = props;
    const { locale } = await props.params;

    //   if (!routing.locales.includes(locale)) {
    //     notFound();
    //   }

    setRequestLocale(locale);

    // Using internationalization in Client Components
    const messages = await getMessages();

    // The `suppressHydrationWarning` attribute in <body> is used to prevent hydration errors caused by Sentry Overlay,
    // which dynamically adds a `style` attribute to the body tag.

    return (
        <html lang="en">
            <body
                className={`${geistSans.variable} ${geistMono.variable} antialiased`}
                suppressHydrationWarning
            >
                <NextIntlClientProvider
                    locale={locale}
                    messages={messages}>
                    <Providers>
                        <div className=" min-h-screen" >
                            {children}
                        </div>
                    </Providers>
                </NextIntlClientProvider>
            </body>
        </html>
    );
}
